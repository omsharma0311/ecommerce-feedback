// <auto-generated />
using System;
using ECommerceFeedback.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerceFeedback.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ECommerceFeedback.Models.Data.Product", b =>
                {
                    b.Property<long>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductId"), 1L, 1);

                    b.Property<bool>("ActiveIndicator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("AuditDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.HasKey("ProductId");

                    b.ToTable("Products", "dbo");
                });

            modelBuilder.Entity("ECommerceFeedback.Models.Data.ShoppingCartProducts", b =>
                {
                    b.Property<long>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CartId"), 1L, 1);

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<long>("UserCartId")
                        .HasColumnType("bigint");

                    b.HasKey("CartId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserCartId");

                    b.ToTable("ShoppingCart", "dbo");
                });

            modelBuilder.Entity("ECommerceFeedback.Models.Data.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"), 1L, 1);

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasColumnType("varchar(400)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PaymentDetails")
                        .IsRequired()
                        .HasColumnType("varchar(400)");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("varchar(400)");

                    b.HasKey("UserId");

                    b.ToTable("User", "dbo");
                });

            modelBuilder.Entity("ECommerceFeedback.Models.Data.UserCart", b =>
                {
                    b.Property<long>("UserCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserCartId"), 1L, 1);

                    b.Property<DateTime>("AuditDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderStaus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ProductPurchased")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("PurchasedDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserCartId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCart", "dbo");
                });

            modelBuilder.Entity("ECommerceFeedback.Models.Data.ShoppingCartProducts", b =>
                {
                    b.HasOne("ECommerceFeedback.Models.Data.Product", "Products")
                        .WithMany("ShoppingCartProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceFeedback.Models.Data.UserCart", "UserCart")
                        .WithMany("ShoppingCartProducts")
                        .HasForeignKey("UserCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Products");

                    b.Navigation("UserCart");
                });

            modelBuilder.Entity("ECommerceFeedback.Models.Data.UserCart", b =>
                {
                    b.HasOne("ECommerceFeedback.Models.Data.User", "User")
                        .WithMany("UserCart")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommerceFeedback.Models.Data.Product", b =>
                {
                    b.Navigation("ShoppingCartProducts");
                });

            modelBuilder.Entity("ECommerceFeedback.Models.Data.User", b =>
                {
                    b.Navigation("UserCart");
                });

            modelBuilder.Entity("ECommerceFeedback.Models.Data.UserCart", b =>
                {
                    b.Navigation("ShoppingCartProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
